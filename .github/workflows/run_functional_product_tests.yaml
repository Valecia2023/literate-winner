# Purpose: Run the product functional tests every night

name: Nightly Product Functional Tests

# Run this workflow at midnight
# on every Sun to Thr (b/c GMT -5)
on:
  push: # temp addition for testing
  schedule:
    - cron: "0 4 * * 0-4"
  workflow_dispatch:

jobs:
  product-tests:
    name: Product Tests
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Create PFX
        run: |
          New-Item -ItemType file -Path ./key.txt
          Set-Content -Path ./key.txt -Value $env:PfxBase64
          certutil -decode ./key.txt ./key.pfx
        env:
          PfxBase64: ${{ secrets.NIGHTLY_TEST_BUILD_PFX }}
      - name: Import PFX
        # Pipe to Out-Null to hide the thumbprint
        run: Import-PfxCertificate -Password (ConvertTo-SecureString -String $env:PfxPassword -AsPlainText -Force) -CertStoreLocation Cert:\CurrentUser\My -FilePath ./key.pfx | Out-Null
        env:
          PfxPassword: ${{ secrets.NIGHTLY_TEST_BUILD_PW }}
      - name: Get Thumbprint
        id: thumbprint
        run: |
          $x509 = Get-PfxCertificate -FilePath ./key.pfx -Password (ConvertTo-SecureString -String $env:PfxPassword -AsPlainText -Force)
          $Thumbprint = $x509.ThumbPrint
          # Pass thumbprint to later job.
          echo THUMBPRINT=$Thumbprint >> $env:GITHUB_OUTPUT
        shell: pwsh # Password requires PS 6
        env:
          PfxPassword: ${{ secrets.NIGHTLY_TEST_BUILD_PW }}
      - name: Setup for Scuba
        run: ./SetUp.ps1
      - name: Install Selenium
        run: Install-Module -Name Selenium
      - name: Update Selenium
        run: ./Testing/Functional/SmokeTest/UpdateSelenium.ps1
      - name: Test Products
        run: |
          # Read thumbprint from previous job.
          $thumbprint = "${{ steps.thumbprint.outputs.THUMBPRINT }}"
          # Read params from secret.
          $json = $env:TestParams
          $json = $json.TrimStart('"').TrimEnd('"') | ConvertFrom-Json
          $i = $json[0]
          $paramsAsJson = ConvertTo-Json $i
          $paramsAsJson
          $paramsAsHashTable = ConvertFrom-Json -AsHashtable $paramsAsJson
          ./Testing/Functional/Products/Tests/CallProductTests.ps1 -params $paramsAsHashTable -thumbprint $thumbprint
          # foreach($i in $json)
          # {
          #   $paramsAsJson = ConvertTo-Json $i
          #   $paramsAsHashTable = ConvertFrom-Json -AsHashtable $paramsAsJson
          #   ./Testing/Functional/Products/Tests/CallProductTests.ps1 -params $paramsAsHashTable -thumbprint $thumbprint
          # }
        shell: pwsh # Convert from JSON requires PS 6
        env:
          TestParams: ${{ secrets.NIGHTLY_TEST_BUILD_PARAMS }}
